name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    
    env:
      IMAGE_NAME: pdf-to-image-web
      CONTAINER_NAME: pdf2img-app
      PORT: 8090
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Stop and remove existing container
      run: |
        if docker ps -a | grep -q ${{ env.CONTAINER_NAME }}; then
          echo "Stopping existing container..."
          docker stop ${{ env.CONTAINER_NAME }} || true
          docker rm ${{ env.CONTAINER_NAME }} || true
        fi
      
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ env.IMAGE_NAME }} .
        
    - name: Create required directories
      run: |
        mkdir -p uploads output
        chmod -R 777 uploads output
        
    - name: Start container
      run: |
        echo "Starting container with 50% CPU limit..."
        docker run -d \
          --name ${{ env.CONTAINER_NAME }} \
          --cpus=0.5 \
          -p ${{ env.PORT }}:8090 \
          -v "$(pwd)/uploads:/app/uploads" \
          -v "$(pwd)/output:/app/output" \
          --restart unless-stopped \
          ${{ env.IMAGE_NAME }}
        
    - name: Check deployment
      run: |
        echo "Checking application status..."
        
        # Ensure the container is running
        if ! docker ps | grep -q ${{ env.CONTAINER_NAME }}; then
          echo "Container is not running."
          exit 1
        fi
        
        # Wait up to 60 seconds for the application to start
        echo "Waiting for Gunicorn server to start (this may take up to 60 seconds)..."
        for i in {1..12}; do
          echo "Attempt $i/12 - waiting 5 seconds..."
          sleep 5
          
          # Check if Gunicorn is ready
          if docker logs ${{ env.CONTAINER_NAME }} 2>&1 | grep -q "Booting worker"; then
            if curl -s http://localhost:${{ env.PORT }} -m 3 > /dev/null; then
              echo "✅ Deployment successful! Production server is running at http://localhost:${{ env.PORT }}"
              docker ps | grep ${{ env.CONTAINER_NAME }}
              exit 0
            fi
          fi
        done
        
        echo "❌ Deployment failed after multiple attempts!"
        echo "Container logs:"
        docker logs ${{ env.CONTAINER_NAME }}
        exit 1 